<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/aop  
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
  
  <!-- 自动扫描 -->  
  <context:component-scan base-package="com.vic"/>
    
  <!-- 启动spring注解,当自动扫描启动后,该配置可以去掉   
  <context:annotation-config /> -->  
      
  <!-- 启动spring注解,等同于 context:annotation-config  
  <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>  
  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>  
  <bean class="org.springframework.beans.factory.annotation.PersistenceAnnotationBeanPostProcessor"/>  
  <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/> -->   
    
  <!-- 配置数据源属性文件 -->  
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:jdbc.properties</value>
      </list>
    </property>
  </bean>
  
  <!-- 配置数据源 -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
      <property name="driverClassName" value="${driver}" />
      <property name="url" value="${url}" />
      <property name="username" value="${username}" />
      <property name="password" value="${password}" />
      <!-- 初始化连接大小   -->
      <property name="initialSize" value="${initialSize}"></property>
      <!-- 连接池最大数量  -->
      <property name="maxActive" value="${maxActive}"></property>
      <!-- 连接池最大空闲  -->
      <property name="maxIdle" value="${maxIdle}"></property>
      <!-- 连接池最小空闲  -->
      <property name="minIdle" value="${minIdle}"></property>
      <!-- 获取连接最大等待时间 -->
      <property name="maxWait" value="${maxWait}"></property>
  </bean>
  
  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="classpath:mybatisConfig.xml"/>
    <!-- 自动扫描mapping.xml文件 -->
    <!-- <property name="mapperLocations" value="classpath:com/vic/model/mapping/*.xml"></property> -->
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.vic.dao" />
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
  </bean>
    
  <!-- 配置事务管理器 -->  
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
    <property name="dataSource" ref="dataSource"/>    
  </bean>  
    
  <!-- 启动spring事务注解，事务注解尽在此 -->  
  <tx:annotation-driven transaction-manager="transactionManager"/>  
    
  <!-- 配置事务特性   
  <tx:advice id="txAdvice" transaction-manager="transactionManager">  
    <tx:attributes>  
        <tx:method name="select*" read-only="true" propagation="REQUIRED"/>  
        <tx:method name="find*" read-only="true" propagation="REQUIRED"/>  
        <tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="*" read-only="true"/>  
    </tx:attributes>  
  </tx:advice> -->  
    
  <!-- 配置事务代理拦截器     
  <bean id="baseTransactionProxy" abstract="true"   
    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">  
    <property name="transactionManager">  
      <ref bean="transactionManager"/>  
    </property>  
    <property name="transactionAttributes">  
      <props>  
        <prop key="insert*">PROPAGATION_REQUIRED</prop>  
        <prop key="update*">PROPAGATION_REQUIRED</prop>  
        <prop key="delete*">PROPAGATION_REQUIRED</prop>  
        <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>      
      </props>     
    </property>  
  </bean> -->  
    
  <!-- 配置哪些类的方法需要进行事务管理   
  <aop:config>  
    <aop:pointcut id="baseServiceMethods" expression="execution(* com.vic.service.*.*(..))"/>  
      <aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods"/>  
    </aop:config>  
  <aop:aspectj-autoproxy /> -->  
    
  <!-- 添加了事务的管理类    
  <bean id="userManager" parent="baseTransactionProxy">     
    <property name="target">      
      <bean class="com.archie.service.UserService"/>  
    </property>    
  </bean> -->   
    
</beans>